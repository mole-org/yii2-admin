{"version":3,"sources":["yii.js","yii.gridView.js","yii.validation.js","yii.activeForm.js","yii.captcha.js"],"names":[],"mappingsjhjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"yii.js","sourcesContent":["/**\n * Yii JavaScript module.\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n\n/**\n * yii is the root module for all Yii JavaScript modules.\n * It implements a mechanism of organizing JavaScript code in modules through the function \"yii.initModule()\".\n *\n * Each module should be named as \"x.y.z\", where \"x\" stands for the root module (for the Yii core code, this is \"yii\").\n *\n * A module may be structured as follows:\n *\n * ~~~\n * yii.sample = (function($) {\n *     var pub = {\n *         // whether this module is currently active. If false, init() will not be called for this module\n *         // it will also not be called for all its child modules. If this property is undefined, it means true.\n *         isActive: true,\n *         init: function() {\n *             // ... module initialization code go here ...\n *         },\n *\n *         // ... other public functions and properties go here ...\n *     };\n *\n *     // ... private functions and properties go here ...\n *\n *     return pub;\n * })(jQuery);\n * ~~~\n *\n * Using this structure, you can define public and private functions/properties for a module.\n * Private functions/properties are only visible within the module, while public functions/properties\n * may be accessed outside of the module. For example, you can access \"yii.sample.isActive\".\n *\n * You must call \"yii.initModule()\" once for the root module of all your modules.\n */\nyii = (function ($) {\n    var pub = {\n        /**\n         * List of JS or CSS URLs that can be loaded multiple times via AJAX requests. Each script can be represented\n         * as either an absolute URL or a relative one.\n         */\n        reloadableScripts: [],\n        /**\n         * The selector for clickable elements that need to support confirmation and form submission.\n         */\n        clickableSelector: 'a, button, input[type=\"submit\"], input[type=\"button\"], input[type=\"reset\"], input[type=\"image\"]',\n        /**\n         * The selector for changeable elements that need to support confirmation and form submission.\n         */\n        changeableSelector: 'select, input, textarea',\n\n        /**\n         * @return string|undefined the CSRF parameter name. Undefined is returned if CSRF validation is not enabled.\n         */\n        getCsrfParam: function () {\n            return $('meta[name=csrf-param]').prop('content');\n        },\n\n        /**\n         * @return string|undefined the CSRF token. Undefined is returned if CSRF validation is not enabled.\n         */\n        getCsrfToken: function () {\n            return $('meta[name=csrf-token]').prop('content');\n        },\n\n        /**\n         * Sets the CSRF token in the meta elements.\n         * This method is provided so that you can update the CSRF token with the latest one you obtain from the server.\n         * @param name the CSRF token name\n         * @param value the CSRF token value\n         */\n        setCsrfToken: function (name, value) {\n            $('meta[name=csrf-param]').prop('content', name);\n            $('meta[name=csrf-token]').prop('content', value)\n        },\n\n        /**\n         * Updates all form CSRF input fields with the latest CSRF token.\n         * This method is provided to avoid cached forms containing outdated CSRF tokens.\n         */\n        refreshCsrfToken: function () {\n            var token = pub.getCsrfToken();\n            if (token) {\n                $('form input[name=\"' + pub.getCsrfParam() + '\"]').val(token);\n            }\n        },\n\n        /**\n         * Displays a confirmation dialog.\n         * The default implementation simply displays a js confirmation dialog.\n         * You may override this by setting `yii.confirm`.\n         * @param message the confirmation message.\n         * @param ok a callback to be called when the user confirms the message\n         * @param cancel a callback to be called when the user cancels the confirmation\n         */\n        confirm: function (message, ok, cancel) {\n            if (confirm(message)) {\n                !ok || ok();\n            } else {\n                !cancel || cancel();\n            }\n        },\n\n        /**\n         * Handles the action triggered by user.\n         * This method recognizes the `data-method` attribute of the element. If the attribute exists,\n         * the method will submit the form containing this element. If there is no containing form, a form\n         * will be created and submitted using the method given by this attribute value (e.g. \"post\", \"put\").\n         * For hyperlinks, the form action will take the value of the \"href\" attribute of the link.\n         * For other elements, either the containing form action or the current page URL will be used\n         * as the form action URL.\n         *\n         * If the `data-method` attribute is not defined, the `href` attribute (if any) of the element\n         * will be assigned to `window.location`.\n         *\n         * @param $e the jQuery representation of the element\n         */\n        handleAction: function ($e) {\n            var method = $e.data('method'),\n                $form = $e.closest('form'),\n                action = $e.attr('href');\n\n            if (method === undefined) {\n                if (action && action != '#') {\n                    window.location = action;\n                } else if ($e.is(':submit') && $form.length) {\n                    $form.trigger('submit');\n                }\n                return;\n            }\n\n            var newForm = !$form.length || action && action != '#';\n            if (newForm) {\n                if (!action || !action.match(/(^\\/|:\\/\\/)/)) {\n                    action = window.location.href;\n                }\n                $form = $('<form method=\"' + method + '\"></form>');\n                $form.prop('action', action);\n                var target = $e.prop('target');\n                if (target) {\n                    $form.attr('target', target);\n                }\n                if (!method.match(/(get|post)/i)) {\n                    $form.append('<input name=\"_method\" value=\"' + method + '\" type=\"hidden\">');\n                    method = 'POST';\n                }\n                if (!method.match(/(get|head|options)/i)) {\n                    var csrfParam = pub.getCsrfParam();\n                    if (csrfParam) {\n                        $form.append('<input name=\"' + csrfParam + '\" value=\"' + pub.getCsrfToken() + '\" type=\"hidden\">');\n                    }\n                }\n                $form.hide().appendTo('body');\n            }\n\n            var activeFormData = $form.data('yiiActiveForm');\n            if (activeFormData) {\n                // remember who triggers the form submission. This is used by yii.activeForm.js\n                activeFormData.submitObject = $e;\n            }\n\n            var oldMethod = $form.prop('method');\n            $form.prop('method', method);\n\n            $form.trigger('submit');\n\n            $form.prop('method', oldMethod);\n\n            if (newForm) {\n                $form.remove();\n            }\n        },\n\n        getQueryParams: function (url) {\n            var pos = url.indexOf('?');\n            if (pos < 0) {\n                return {};\n            }\n            var qs = url.substring(pos + 1).split('&');\n            for (var i = 0, result = {}; i < qs.length; i++) {\n                qs[i] = qs[i].split('=');\n                result[decodeURIComponent(qs[i][0])] = decodeURIComponent(qs[i][1]);\n            }\n            return result;\n        },\n\n        initModule: function (module) {\n            if (module.isActive === undefined || module.isActive) {\n                if ($.isFunction(module.init)) {\n                    module.init();\n                }\n                $.each(module, function () {\n                    if ($.isPlainObject(this)) {\n                        pub.initModule(this);\n                    }\n                });\n            }\n        },\n\n        init: function () {\n            initCsrfHandler();\n            initRedirectHandler();\n            initScriptFilter();\n            initDataMethods();\n        }\n    };\n\n    function initRedirectHandler() {\n        // handle AJAX redirection\n        $(document).ajaxComplete(function (event, xhr, settings) {\n            var url = xhr.getResponseHeader('X-Redirect');\n            if (url) {\n                window.location = url;\n            }\n        });\n    }\n\n    function initCsrfHandler() {\n        // automatically send CSRF token for all AJAX requests\n        $.ajaxPrefilter(function (options, originalOptions, xhr) {\n            if (!options.crossDomain && pub.getCsrfParam()) {\n                xhr.setRequestHeader('X-CSRF-Token', pub.getCsrfToken());\n            }\n        });\n        pub.refreshCsrfToken();\n    }\n\n    function initDataMethods() {\n        var handler = function (event) {\n            var $this = $(this),\n                method = $this.data('method'),\n                message = $this.data('confirm');\n\n            if (method === undefined && message === undefined) {\n                return true;\n            }\n\n            if (message !== undefined) {\n                pub.confirm(message, function () {\n                    pub.handleAction($this);\n                });\n            } else {\n                pub.handleAction($this);\n            }\n            event.stopImmediatePropagation();\n            return false;\n        };\n\n        // handle data-confirm and data-method for clickable and changeable elements\n        $(document).on('click.yii', pub.clickableSelector, handler)\n            .on('change.yii', pub.changeableSelector, handler);\n    }\n\n    function initScriptFilter() {\n        var hostInfo = location.protocol + '//' + location.host;\n        var loadedScripts = $('script[src]').map(function () {\n            return this.src.charAt(0) === '/' ? hostInfo + this.src : this.src;\n        }).toArray();\n\n        $.ajaxPrefilter('script', function (options, originalOptions, xhr) {\n            if (options.dataType == 'jsonp') {\n                return;\n            }\n            var url = options.url.charAt(0) === '/' ? hostInfo + options.url : options.url;\n            if ($.inArray(url, loadedScripts) === -1) {\n                loadedScripts.push(url);\n            } else {\n                var found = $.inArray(url, $.map(pub.reloadableScripts, function (script) {\n                    return script.charAt(0) === '/' ? hostInfo + script : script;\n                })) !== -1;\n                if (!found) {\n                    xhr.abort();\n                }\n            }\n        });\n\n        $(document).ajaxComplete(function (event, xhr, settings) {\n            var styleSheets = [];\n            $('link[rel=stylesheet]').each(function () {\n                if ($.inArray(this.href, pub.reloadableScripts) !== -1) {\n                    return;\n                }\n                if ($.inArray(this.href, styleSheets) == -1) {\n                    styleSheets.push(this.href)\n                } else {\n                    $(this).remove();\n                }\n            })\n        });\n    }\n\n    return pub;\n})(jQuery);\n\njQuery(document).ready(function () {\n    yii.initModule(yii);\n});\n","/**\n * Yii GridView widget.\n *\n * This is the JavaScript widget used by the yii\\grid\\GridView widget.\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n(function ($) {\n    $.fn.yiiGridView = function (method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exist on jQuery.yiiGridView');\n            return false;\n        }\n    };\n\n    var defaults = {\n        filterUrl: undefined,\n        filterSelector: undefined\n    };\n\n    var gridData = {};\n\n    var gridEvents = {\n        /**\n         * beforeFilter event is triggered before filtering the grid.\n         * The signature of the event handler should be:\n         *     function (event)\n         * where\n         *  - event: an Event object.\n         *\n         * If the handler returns a boolean false, it will stop filter form submission after this event. As\n         * a result, afterFilter event will not be triggered.\n         */\n        beforeFilter: 'beforeFilter',\n        /**\n         * afterFilter event is triggered after filtering the grid and filtered results are fetched.\n         * The signature of the event handler should be:\n         *     function (event)\n         * where\n         *  - event: an Event object.\n         */\n        afterFilter: 'afterFilter'\n    };\n    \n    var methods = {\n        init: function (options) {\n            return this.each(function () {\n                var $e = $(this);\n                var settings = $.extend({}, defaults, options || {});\n                gridData[$e.prop('id')] = {settings: settings};\n\n                var enterPressed = false;\n                $(document).off('change.yiiGridView keydown.yiiGridView', settings.filterSelector)\n                    .on('change.yiiGridView keydown.yiiGridView', settings.filterSelector, function (event) {\n                        if (event.type === 'keydown') {\n                            if (event.keyCode !== 13) {\n                                return; // only react to enter key\n                            } else {\n                                enterPressed = true;\n                            }\n                        } else {\n                            // prevent processing for both keydown and change events\n                            if (enterPressed) {\n                                enterPressed = false;\n                                return;\n                            }\n                        }\n\n                        methods.applyFilter.apply($e);\n\n                        return false;\n                    });\n            });\n        },\n\n        applyFilter: function () {\n            var $grid = $(this), event;\n            var settings = gridData[$grid.prop('id')].settings;\n            var data = {};\n            $.each($(settings.filterSelector).serializeArray(), function () {\n                data[this.name] = this.value;\n            });\n\n            $.each(yii.getQueryParams(settings.filterUrl), function (name, value) {\n                if (data[name] === undefined) {\n                    data[name] = value;\n                }\n            });\n\n            var pos = settings.filterUrl.indexOf('?');\n            var url = pos < 0 ? settings.filterUrl : settings.filterUrl.substring(0, pos);\n\n            $grid.find('form.gridview-filter-form').remove();\n            var $form = $('<form action=\"' + url + '\" method=\"get\" class=\"gridview-filter-form\" style=\"display:none\" data-pjax></form>').appendTo($grid);\n            $.each(data, function (name, value) {\n                $form.append($('<input type=\"hidden\" name=\"t\" value=\"\" />').attr('name', name).val(value));\n            });\n            \n            event = $.Event(gridEvents.beforeFilter);\n            $grid.trigger(event);\n            if (event.result === false) {\n                return;\n            }\n\n            $form.submit();\n            \n            $grid.trigger(gridEvents.afterFilter);\n        },\n\n        setSelectionColumn: function (options) {\n            var $grid = $(this);\n            var id = $(this).prop('id');\n            gridData[id].selectionColumn = options.name;\n            if (!options.multiple) {\n                return;\n            }\n            var checkAll = \"#\" + id + \" input[name='\" + options.checkAll + \"']\";\n            var inputs = \"#\" + id + \" input[name='\" + options.name + \"']\";\n            $(document).off('click.yiiGridView', checkAll).on('click.yiiGridView', checkAll, function () {\n                $grid.find(\"input[name='\" + options.name + \"']:enabled\").prop('checked', this.checked);\n            });\n            $(document).off('click.yiiGridView', inputs + \":enabled\").on('click.yiiGridView', inputs + \":enabled\", function () {\n                var all = $grid.find(\"input[name='\" + options.name + \"']\").length == $grid.find(\"input[name='\" + options.name + \"']:checked\").length;\n                $grid.find(\"input[name='\" + options.checkAll + \"']\").prop('checked', all);\n            });\n        },\n\n        getSelectedRows: function () {\n            var $grid = $(this);\n            var data = gridData[$grid.prop('id')];\n            var keys = [];\n            if (data.selectionColumn) {\n                $grid.find(\"input[name='\" + data.selectionColumn + \"']:checked\").each(function () {\n                    keys.push($(this).parent().closest('tr').data('key'));\n                });\n            }\n            return keys;\n        },\n\n        destroy: function () {\n            return this.each(function () {\n                $(window).unbind('.yiiGridView');\n                $(this).removeData('yiiGridView');\n            });\n        },\n\n        data: function () {\n            var id = $(this).prop('id');\n            return gridData[id];\n        }\n    };\n})(window.jQuery);\n","/**\n * Yii validation module.\n *\n * This JavaScript module provides the validation methods for the built-in validators.\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n\nyii.validation = (function ($) {\n    var pub = {\n        isEmpty: function (value) {\n            return value === null || value === undefined || value == [] || value === '';\n        },\n\n        addMessage: function (messages, message, value) {\n            messages.push(message.replace(/\\{value\\}/g, value));\n        },\n\n        required: function (value, messages, options) {\n            var valid = false;\n            if (options.requiredValue === undefined) {\n                var isString = typeof value == 'string' || value instanceof String;\n                if (options.strict && value !== undefined || !options.strict && !pub.isEmpty(isString ? $.trim(value) : value)) {\n                    valid = true;\n                }\n            } else if (!options.strict && value == options.requiredValue || options.strict && value === options.requiredValue) {\n                valid = true;\n            }\n\n            if (!valid) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        boolean: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n            var valid = !options.strict && (value == options.trueValue || value == options.falseValue)\n                || options.strict && (value === options.trueValue || value === options.falseValue);\n\n            if (!valid) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        string: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            if (typeof value !== 'string') {\n                pub.addMessage(messages, options.message, value);\n                return;\n            }\n\n            if (options.min !== undefined && value.length < options.min) {\n                pub.addMessage(messages, options.tooShort, value);\n            }\n            if (options.max !== undefined && value.length > options.max) {\n                pub.addMessage(messages, options.tooLong, value);\n            }\n            if (options.is !== undefined && value.length != options.is) {\n                pub.addMessage(messages, options.notEqual, value);\n            }\n        },\n        \n        file: function (attribute, messages, options) {\n            var files = getUploadedFiles(attribute, messages, options);\n            $.each(files, function (i, file) {\n                validateFile(file, messages, options);\n            });\n        },\n        \n        image: function (attribute, messages, options, deferred) {\n            var files = getUploadedFiles(attribute, messages, options);\n            \n            $.each(files, function (i, file) {\n                validateFile(file, messages, options);\n\n                // Skip image validation if FileReader API is not available\n                if (typeof FileReader === \"undefined\") {\n                    return;\n                }\n\n                var def = $.Deferred(),\n                    fr = new FileReader(),\n                    img = new Image();\n                    \n                img.onload = function () {\n                    if (options.minWidth && this.width < options.minWidth) {\n                        messages.push(options.underWidth.replace(/\\{file\\}/g, file.name));\n                    }\n                    \n                    if (options.maxWidth && this.width > options.maxWidth) {\n                        messages.push(options.overWidth.replace(/\\{file\\}/g, file.name));\n                    }\n                    \n                    if (options.minHeight && this.height < options.minHeight) {\n                        messages.push(options.underHeight.replace(/\\{file\\}/g, file.name));\n                    }\n                    \n                    if (options.maxHeight && this.height > options.maxHeight) {\n                        messages.push(options.overHeight.replace(/\\{file\\}/g, file.name));\n                    }\n                    def.resolve();\n                };\n                \n                img.onerror = function () {\n                    messages.push(options.notImage.replace(/\\{file\\}/g, file.name));\n                    def.resolve();\n                };\n                \n                fr.onload = function () {\n                    img.src = fr.result;\n                };\n                \n                // Resolve deferred if there was error while reading data\n                fr.onerror = function () {\n                    def.resolve();\n                };\n                \n                fr.readAsDataURL(file);\n                \n                deferred.push(def);\n            });\n        \n        },\n\n        number: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            if (typeof value === 'string' && !value.match(options.pattern)) {\n                pub.addMessage(messages, options.message, value);\n                return;\n            }\n\n            if (options.min !== undefined && value < options.min) {\n                pub.addMessage(messages, options.tooSmall, value);\n            }\n            if (options.max !== undefined && value > options.max) {\n                pub.addMessage(messages, options.tooBig, value);\n            }\n        },\n\n        range: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            if (!options.allowArray && $.isArray(value)) {\n                pub.addMessage(messages, options.message, value);\n                return;\n            }\n\n            var inArray = true;\n\n            $.each($.isArray(value) ? value : [value], function(i, v) {\n                if ($.inArray(v, options.range) == -1) {\n                    inArray = false;\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n\n            if (options.not === inArray) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        regularExpression: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            if (!options.not && !value.match(options.pattern) || options.not && value.match(options.pattern)) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        email: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            var valid = true;\n\n            if (options.enableIDN) {\n                var regexp = /^(.*<?)(.*)@(.*)(>?)$/,\n                    matches = regexp.exec(value);\n                if (matches === null) {\n                    valid = false;\n                } else {\n                    value = matches[1] + punycode.toASCII(matches[2]) + '@' + punycode.toASCII(matches[3]) + matches[4];\n                }\n            }\n\n            if (!valid || !(value.match(options.pattern) || (options.allowName && value.match(options.fullPattern)))) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        url: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            if (options.defaultScheme && !value.match(/:\\/\\//)) {\n                value = options.defaultScheme + '://' + value;\n            }\n\n            var valid = true;\n\n            if (options.enableIDN) {\n                var regexp = /^([^:]+):\\/\\/([^\\/]+)(.*)$/,\n                    matches = regexp.exec(value);\n                if (matches === null) {\n                    valid = false;\n                } else {\n                    value = matches[1] + '://' + punycode.toASCII(matches[2]) + matches[3];\n                }\n            }\n\n            if (!valid || !value.match(options.pattern)) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        captcha: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            // CAPTCHA may be updated via AJAX and the updated hash is stored in body data\n            var hash = $('body').data(options.hashKey);\n            if (hash == null) {\n                hash = options.hash;\n            } else {\n                hash = hash[options.caseSensitive ? 0 : 1];\n            }\n            var v = options.caseSensitive ? value : value.toLowerCase();\n            for (var i = v.length - 1, h = 0; i >= 0; --i) {\n                h += v.charCodeAt(i);\n            }\n            if (h != hash) {\n                pub.addMessage(messages, options.message, value);\n            }\n        },\n\n        compare: function (value, messages, options) {\n            if (options.skipOnEmpty && pub.isEmpty(value)) {\n                return;\n            }\n\n            var compareValue, valid = true;\n            if (options.compareAttribute === undefined) {\n                compareValue = options.compareValue;\n            } else {\n                compareValue = $('#' + options.compareAttribute).val();\n            }\n\n            if (options.type === 'number') {\n                value = parseFloat(value);\n                compareValue = parseFloat(compareValue);\n            }\n            switch (options.operator) {\n                case '==':\n                    valid = value == compareValue;\n                    break;\n                case '===':\n                    valid = value === compareValue;\n                    break;\n                case '!=':\n                    valid = value != compareValue;\n                    break;\n                case '!==':\n                    valid = value !== compareValue;\n                    break;\n                case '>':\n                    valid = parseFloat(value) > parseFloat(compareValue);\n                    break;\n                case '>=':\n                    valid = parseFloat(value) >= parseFloat(compareValue);\n                    break;\n                case '<':\n                    valid = parseFloat(value) < parseFloat(compareValue);\n                    break;\n                case '<=':\n                    valid = parseFloat(value) <= parseFloat(compareValue);\n                    break;\n                default:\n                    valid = false;\n                    break;\n            }\n\n            if (!valid) {\n                pub.addMessage(messages, options.message, value);\n            }\n        }\n    };\n\n    function getUploadedFiles(attribute, messages, options) {\n        // Skip validation if File API is not available\n        if (typeof File === \"undefined\") {\n            return [];\n        }\n        \n        var files = $(attribute.input).get(0).files;\n        if (!files) {\n            messages.push(options.message);\n            return [];\n        }\n\n        if (files.length === 0) {\n            if (!options.skipOnEmpty) {\n                messages.push(options.uploadRequired);\n            }\n            return [];\n        }\n\n        if (options.maxFiles && options.maxFiles < files.length) {\n            messages.push(options.tooMany);\n            return [];\n        }\n\n        return files;\n    }\n\n    function validateFile(file, messages, options) {\n        if (options.extensions && options.extensions.length > 0) {\n            var index, ext;\n\n            index = file.name.lastIndexOf('.');\n\n            if (!~index) {\n                ext = '';\n            } else {\n                ext = file.name.substr(index + 1, file.name.length).toLowerCase();\n            }\n\n            if (!~options.extensions.indexOf(ext)) {\n                messages.push(options.wrongExtension.replace(/\\{file\\}/g, file.name));\n            }\n        }\n\n        if (options.mimeTypes && options.mimeTypes.length > 0) {\n            if (!~options.mimeTypes.indexOf(file.type)) {\n                messages.push(options.wrongMimeType.replace(/\\{file\\}/g, file.name));\n            }\n        }\n\n        if (options.maxSize && options.maxSize < file.size) {\n            messages.push(options.tooBig.replace(/\\{file\\}/g, file.name));\n        }\n\n        if (options.minSize && options.minSize > file.size) {\n            messages.push(options.tooSmall.replace(/\\{file\\}/g, file.name));\n        }\n    }\n\n    return pub;\n})(jQuery);\n","/**\n * Yii form widget.\n *\n * This is the JavaScript widget used by the yii\\widgets\\ActiveForm widget.\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n(function ($) {\n\n    $.fn.yiiActiveForm = function (method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exist on jQuery.yiiActiveForm');\n            return false;\n        }\n    };\n\n    var events = {\n        /**\n         * beforeValidate event is triggered before validating the whole form.\n         * The signature of the event handler should be:\n         *     function (event, messages, deferreds)\n         * where\n         *  - event: an Event object.\n         *  - messages: an associative array with keys being attribute IDs and values being error message arrays\n         *    for the corresponding attributes.\n         *  - deferreds: an array of Deferred objects. You can use deferreds.add(callback) to add a new deferred validation.\n         *\n         * If the handler returns a boolean false, it will stop further form validation after this event. And as\n         * a result, afterValidate event will not be triggered.\n         */\n        beforeValidate: 'beforeValidate',\n        /**\n         * afterValidate event is triggered after validating the whole form.\n         * The signature of the event handler should be:\n         *     function (event, messages)\n         * where\n         *  - event: an Event object.\n         *  - messages: an associative array with keys being attribute IDs and values being error message arrays\n         *    for the corresponding attributes.\n         */\n        afterValidate: 'afterValidate',\n        /**\n         * beforeValidateAttribute event is triggered before validating an attribute.\n         * The signature of the event handler should be:\n         *     function (event, attribute, messages, deferreds)\n         * where\n         *  - event: an Event object.\n         *  - attribute: the attribute to be validated. Please refer to attributeDefaults for the structure of this parameter.\n         *  - messages: an array to which you can add validation error messages for the specified attribute.\n         *  - deferreds: an array of Deferred objects. You can use deferreds.add(callback) to add a new deferred validation.\n         *\n         * If the handler returns a boolean false, it will stop further validation of the specified attribute.\n         * And as a result, afterValidateAttribute event will not be triggered.\n         */\n        beforeValidateAttribute: 'beforeValidateAttribute',\n        /**\n         * afterValidateAttribute event is triggered after validating the whole form and each attribute.\n         * The signature of the event handler should be:\n         *     function (event, attribute, messages)\n         * where\n         *  - event: an Event object.\n         *  - attribute: the attribute being validated. Please refer to attributeDefaults for the structure of this parameter.\n         *  - messages: an array to which you can add additional validation error messages for the specified attribute.\n         */\n        afterValidateAttribute: 'afterValidateAttribute',\n        /**\n         * beforeSubmit event is triggered before submitting the form after all validations have passed.\n         * The signature of the event handler should be:\n         *     function (event)\n         * where event is an Event object.\n         *\n         * If the handler returns a boolean false, it will stop form submission.\n         */\n        beforeSubmit: 'beforeSubmit',\n        /**\n         * ajaxBeforeSend event is triggered before sending an AJAX request for AJAX-based validation.\n         * The signature of the event handler should be:\n         *     function (event, jqXHR, settings)\n         * where\n         *  - event: an Event object.\n         *  - jqXHR: a jqXHR object\n         *  - settings: the settings for the AJAX request\n         */\n        ajaxBeforeSend: 'ajaxBeforeSend',\n        /**\n         * ajaxComplete event is triggered after completing an AJAX request for AJAX-based validation.\n         * The signature of the event handler should be:\n         *     function (event, jqXHR, textStatus)\n         * where\n         *  - event: an Event object.\n         *  - jqXHR: a jqXHR object\n         *  - settings: the status of the request (\"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", or \"parsererror\").\n         */\n        ajaxComplete: 'ajaxComplete'\n    };\n\n    // NOTE: If you change any of these defaults, make sure you update yii\\widgets\\ActiveForm::getClientOptions() as well\n    var defaults = {\n        // whether to encode the error summary\n        encodeErrorSummary: true,\n        // the jQuery selector for the error summary\n        errorSummary: '.error-summary',\n        // whether to perform validation before submitting the form.\n        validateOnSubmit: true,\n        // the container CSS class representing the corresponding attribute has validation error\n        errorCssClass: 'has-error',\n        // the container CSS class representing the corresponding attribute passes validation\n        successCssClass: 'has-success',\n        // the container CSS class representing the corresponding attribute is being validated\n        validatingCssClass: 'validating',\n        // the GET parameter name indicating an AJAX-based validation\n        ajaxParam: 'ajax',\n        // the type of data that you're expecting back from the server\n        ajaxDataType: 'json',\n        // the URL for performing AJAX-based validation. If not set, it will use the the form's action\n        validationUrl: undefined\n    };\n\n    // NOTE: If you change any of these defaults, make sure you update yii\\widgets\\ActiveField::getClientOptions() as well\n    var attributeDefaults = {\n        // a unique ID identifying an attribute (e.g. \"loginform-username\") in a form\n        id: undefined,\n        // attribute name or expression (e.g. \"[0]content\" for tabular input)\n        name: undefined,\n        // the jQuery selector of the container of the input field\n        container: undefined,\n        // the jQuery selector of the input field under the context of the container\n        input: undefined,\n        // the jQuery selector of the error tag under the context of the container\n        error: '.help-block',\n        // whether to encode the error\n        encodeError: true,\n        // whether to perform validation when a change is detected on the input\n        validateOnChange: true,\n        // whether to perform validation when the input loses focus\n        validateOnBlur: true,\n        // whether to perform validation when the user is typing.\n        validateOnType: false,\n        // number of milliseconds that the validation should be delayed when a user is typing in the input field.\n        validationDelay: 500,\n        // whether to enable AJAX-based validation.\n        enableAjaxValidation: false,\n        // function (attribute, value, messages), the client-side validation function.\n        validate: undefined,\n        // status of the input field, 0: empty, not entered before, 1: validated, 2: pending validation, 3: validating\n        status: 0,\n        // whether the validation is cancelled by beforeValidateAttribute event handler\n        cancelled: false,\n        // the value of the input\n        value: undefined\n    };\n\n    var methods = {\n        init: function (attributes, options) {\n            return this.each(function () {\n                var $form = $(this);\n                if ($form.data('yiiActiveForm')) {\n                    return;\n                }\n\n                var settings = $.extend({}, defaults, options || {});\n                if (settings.validationUrl === undefined) {\n                    settings.validationUrl = $form.prop('action');\n                }\n\n                $.each(attributes, function (i) {\n                    attributes[i] = $.extend({value: getValue($form, this)}, attributeDefaults, this);\n                    watchAttribute($form, attributes[i]);\n                });\n\n                $form.data('yiiActiveForm', {\n                    settings: settings,\n                    attributes: attributes,\n                    submitting: false,\n                    validated: false\n                });\n\n                /**\n                 * Clean up error status when the form is reset.\n                 * Note that $form.on('reset', ...) does work because the \"reset\" event does not bubble on IE.\n                 */\n                $form.bind('reset.yiiActiveForm', methods.resetForm);\n\n                if (settings.validateOnSubmit) {\n                    $form.on('mouseup.yiiActiveForm keyup.yiiActiveForm', ':submit', function () {\n                        $form.data('yiiActiveForm').submitObject = $(this);\n                    });\n                    $form.on('submit.yiiActiveForm', methods.submitForm);\n                }\n            });\n        },\n\n        // add a new attribute to the form dynamically.\n        // please refer to attributeDefaults for the structure of attribute\n        add: function (attribute) {\n            var $form = $(this);\n            attribute = $.extend({value: getValue($form, attribute)}, attributeDefaults, attribute);\n            $form.data('yiiActiveForm').attributes.push(attribute);\n            watchAttribute($form, attribute);\n        },\n\n        // remove the attribute with the specified ID from the form\n        remove: function (id) {\n            var $form = $(this),\n                attributes = $form.data('yiiActiveForm').attributes,\n                index = -1,\n                attribute = undefined;\n            $.each(attributes, function (i) {\n                if (attributes[i]['id'] == id) {\n                    index = i;\n                    attribute = attributes[i];\n                    return false;\n                }\n            });\n            if (index >= 0) {\n                attributes.splice(index, 1);\n                unwatchAttribute($form, attribute);\n            }\n            return attribute;\n        },\n\n        // find an attribute config based on the specified attribute ID\n        find: function (id) {\n            var attributes = $(this).data('yiiActiveForm').attributes,\n                result = undefined;\n            $.each(attributes, function (i) {\n                if (attributes[i]['id'] == id) {\n                    result = attributes[i];\n                    return false;\n                }\n            });\n            return result;\n        },\n\n        destroy: function () {\n            return this.each(function () {\n                $(this).unbind('.yiiActiveForm');\n                $(this).removeData('yiiActiveForm');\n            });\n        },\n\n        data: function () {\n            return this.data('yiiActiveForm');\n        },\n\n        validate: function () {\n            var $form = $(this),\n                data = $form.data('yiiActiveForm'),\n                needAjaxValidation = false,\n                messages = {},\n                deferreds = deferredArray(),\n                submitting = data.submitting;\n\n            if (submitting) {\n                var event = $.Event(events.beforeValidate);\n                $form.trigger(event, [messages, deferreds]);\n                if (event.result === false) {\n                    data.submitting = false;\n                    return;\n                }\n            }\n\n            // client-side validation\n            $.each(data.attributes, function () {\n                this.cancelled = false;\n                // perform validation only if the form is being submitted or if an attribute is pending validation\n                if (data.submitting || this.status === 2 || this.status === 3) {\n                    var msg = messages[this.id];\n                    if (msg === undefined) {\n                        msg = [];\n                        messages[this.id] = msg;\n                    }\n                    var event = $.Event(events.beforeValidateAttribute);\n                    $form.trigger(event, [this, msg, deferreds]);\n                    if (event.result !== false) {\n                        if (this.validate) {\n                            this.validate(this, getValue($form, this), msg, deferreds);\n                        }\n                        if (this.enableAjaxValidation) {\n                            needAjaxValidation = true;\n                        }\n                    } else {\n                        this.cancelled = true;\n                    }\n                }\n            });\n\n            // ajax validation\n            $.when.apply(this, deferreds).always(function() {\n                // Remove empty message arrays\n                for (var i in messages) {\n                    if (0 === messages[i].length) {\n                        delete messages[i];\n                    }\n                }\n                if (needAjaxValidation) {\n                    var $button = data.submitObject,\n                        extData = '&' + data.settings.ajaxParam + '=' + $form.prop('id');\n                    if ($button && $button.length && $button.prop('name')) {\n                        extData += '&' + $button.prop('name') + '=' + $button.prop('value');\n                    }\n                    $.ajax({\n                        url: data.settings.validationUrl,\n                        type: $form.prop('method'),\n                        data: $form.serialize() + extData,\n                        dataType: data.settings.ajaxDataType,\n                        complete: function (jqXHR, textStatus) {\n                            $form.trigger(events.ajaxComplete, [jqXHR, textStatus]);\n                        },\n                        beforeSend: function (jqXHR, settings) {\n                            $form.trigger(events.ajaxBeforeSend, [jqXHR, settings]);\n                        },\n                        success: function (msgs) {\n                            if (msgs !== null && typeof msgs === 'object') {\n                                $.each(data.attributes, function () {\n                                    if (!this.enableAjaxValidation || this.cancelled) {\n                                        delete msgs[this.id];\n                                    }\n                                });\n                                updateInputs($form, $.extend(messages, msgs), submitting);\n                            } else {\n                                updateInputs($form, messages, submitting);\n                            }\n                        },\n                        error: function () {\n                            data.submitting = false;\n                        }\n                    });\n                } else if (data.submitting) {\n                    // delay callback so that the form can be submitted without problem\n                    setTimeout(function () {\n                        updateInputs($form, messages, submitting);\n                    }, 200);\n                } else {\n                    updateInputs($form, messages, submitting);\n                }\n            });\n        },\n\n        submitForm: function () {\n            var $form = $(this),\n                data = $form.data('yiiActiveForm');\n\n            if (data.validated) {\n                data.submitting = false;\n                var event = $.Event(events.beforeSubmit);\n                $form.trigger(event);\n                if (event.result === false) {\n                    data.validated = false;\n                    return false;\n                }\n                return true;   // continue submitting the form since validation passes\n            } else {\n                if (data.settings.timer !== undefined) {\n                    clearTimeout(data.settings.timer);\n                }\n                data.submitting = true;\n                methods.validate.call($form);\n                return false;\n            }\n        },\n\n        resetForm: function () {\n            var $form = $(this);\n            var data = $form.data('yiiActiveForm');\n            // Because we bind directly to a form reset event instead of a reset button (that may not exist),\n            // when this function is executed form input values have not been reset yet.\n            // Therefore we do the actual reset work through setTimeout.\n            setTimeout(function () {\n                $.each(data.attributes, function () {\n                    // Without setTimeout() we would get the input values that are not reset yet.\n                    this.value = getValue($form, this);\n                    this.status = 0;\n                    var $container = $form.find(this.container);\n                    $container.removeClass(\n                        data.settings.validatingCssClass + ' ' +\n                            data.settings.errorCssClass + ' ' +\n                            data.settings.successCssClass\n                    );\n                    $container.find(this.error).html('');\n                });\n                $form.find(data.settings.errorSummary).hide().find('ul').html('');\n            }, 1);\n        }\n    };\n\n    var watchAttribute = function ($form, attribute) {\n        var $input = findInput($form, attribute);\n        if (attribute.validateOnChange) {\n            $input.on('change.yiiActiveForm',function () {\n                validateAttribute($form, attribute, false);\n            });\n        }\n        if (attribute.validateOnBlur) {\n            $input.on('blur.yiiActiveForm', function () {\n                if (attribute.status == 0 || attribute.status == 1) {\n                    validateAttribute($form, attribute, !attribute.status);\n                }\n            });\n        }\n        if (attribute.validateOnType) {\n            $input.on('keyup.yiiActiveForm', function () {\n                if (attribute.value !== getValue($form, attribute)) {\n                    validateAttribute($form, attribute, false, attribute.validationDelay);\n                }\n            });\n        }\n    };\n\n    var unwatchAttribute = function ($form, attribute) {\n        findInput($form, attribute).off('.yiiActiveForm');\n    };\n\n    var validateAttribute = function ($form, attribute, forceValidate, validationDelay) {\n        var data = $form.data('yiiActiveForm');\n\n        if (forceValidate) {\n            attribute.status = 2;\n        }\n        $.each(data.attributes, function () {\n            if (this.value !== getValue($form, this)) {\n                this.status = 2;\n                forceValidate = true;\n            }\n        });\n        if (!forceValidate) {\n            return;\n        }\n\n        if (data.settings.timer !== undefined) {\n            clearTimeout(data.settings.timer);\n        }\n        data.settings.timer = setTimeout(function () {\n            if (data.submitting || $form.is(':hidden')) {\n                return;\n            }\n            $.each(data.attributes, function () {\n                if (this.status === 2) {\n                    this.status = 3;\n                    $form.find(this.container).addClass(data.settings.validatingCssClass);\n                }\n            });\n            methods.validate.call($form);\n        }, validationDelay ? validationDelay : 200);\n    };\n    \n    /**\n     * Returns an array prototype with a shortcut method for adding a new deferred.\n     * The context of the callback will be the deferred object so it can be resolved like ```this.resolve()```\n     * @returns Array\n     */\n    var deferredArray = function () {\n        var array = [];\n        array.add = function(callback) {\n            this.push(new $.Deferred(callback));\n        };\n        return array;\n    };\n\n    /**\n     * Updates the error messages and the input containers for all applicable attributes\n     * @param $form the form jQuery object\n     * @param messages array the validation error messages\n     * @param submitting whether this method is called after validation triggered by form submission\n     */\n    var updateInputs = function ($form, messages, submitting) {\n        var data = $form.data('yiiActiveForm');\n\n        if (submitting) {\n            var errorInputs = [];\n            $.each(data.attributes, function () {\n                if (!this.cancelled && updateInput($form, this, messages)) {\n                    errorInputs.push(this.input);\n                }\n            });\n\n            $form.trigger(events.afterValidate, [messages]);\n\n            updateSummary($form, messages);\n\n            if (errorInputs.length) {\n                var top = $form.find(errorInputs.join(',')).first().closest(':visible').offset().top;\n                var wtop = $(window).scrollTop();\n                if (top < wtop || top > wtop + $(window).height) {\n                    $(window).scrollTop(top);\n                }\n                data.submitting = false;\n            } else {\n                data.validated = true;\n                var $button = data.submitObject || $form.find(':submit:first');\n                // TODO: if the submission is caused by \"change\" event, it will not work\n                if ($button.length) {\n                    $button.click();\n                } else {\n                    // no submit button in the form\n                    $form.submit();\n                }\n            }\n        } else {\n            $.each(data.attributes, function () {\n                if (!this.cancelled && (this.status === 2 || this.status === 3)) {\n                    updateInput($form, this, messages);\n                }\n            });\n        }\n    };\n\n    /**\n     * Updates the error message and the input container for a particular attribute.\n     * @param $form the form jQuery object\n     * @param attribute object the configuration for a particular attribute.\n     * @param messages array the validation error messages\n     * @return boolean whether there is a validation error for the specified attribute\n     */\n    var updateInput = function ($form, attribute, messages) {\n        var data = $form.data('yiiActiveForm'),\n            $input = findInput($form, attribute),\n            hasError = false;\n\n        if (!$.isArray(messages[attribute.id])) {\n            messages[attribute.id] = [];\n        }\n        $form.trigger(events.afterValidateAttribute, [attribute, messages[attribute.id]]);\n\n        attribute.status = 1;\n        if ($input.length) {\n            hasError = messages[attribute.id].length > 0;\n            var $container = $form.find(attribute.container);\n            var $error = $container.find(attribute.error);\n            if (hasError) {\n                if (attribute.encodeError) {\n                    $error.text(messages[attribute.id][0]);\n                } else {\n                    $error.html(messages[attribute.id][0]);\n                }\n                $container.removeClass(data.settings.validatingCssClass + ' ' + data.settings.successCssClass)\n                    .addClass(data.settings.errorCssClass);\n            } else {\n                $error.empty();\n                $container.removeClass(data.settings.validatingCssClass + ' ' + data.settings.errorCssClass + ' ')\n                    .addClass(data.settings.successCssClass);\n            }\n            attribute.value = getValue($form, attribute);\n        }\n        return hasError;\n    };\n\n    /**\n     * Updates the error summary.\n     * @param $form the form jQuery object\n     * @param messages array the validation error messages\n     */\n    var updateSummary = function ($form, messages) {\n        var data = $form.data('yiiActiveForm'),\n            $summary = $form.find(data.settings.errorSummary),\n            $ul = $summary.find('ul').empty();\n\n        if ($summary.length && messages) {\n            $.each(data.attributes, function () {\n                if ($.isArray(messages[this.id]) && messages[this.id].length) {\n                    var error = $('<li/>');\n                    if (data.settings.encodeErrorSummary) {\n                        error.text(messages[this.id][0]);\n                    } else {\n                        error.html(messages[this.id][0]);\n                    }\n                    $ul.append(error);\n                }\n            });\n            $summary.toggle($ul.find('li').length > 0);\n        }\n    };\n\n    var getValue = function ($form, attribute) {\n        var $input = findInput($form, attribute);\n        var type = $input.prop('type');\n        if (type === 'checkbox' || type === 'radio') {\n            var $realInput = $input.filter(':checked');\n            if (!$realInput.length) {\n                $realInput = $form.find('input[type=hidden][name=\"' + $input.prop('name') + '\"]');\n            }\n            return $realInput.val();\n        } else {\n            return $input.val();\n        }\n    };\n\n    var findInput = function ($form, attribute) {\n        var $input = $form.find(attribute.input);\n        if ($input.length && $input[0].tagName.toLowerCase() === 'div') {\n            // checkbox list or radio list\n            return $input.find('input');\n        } else {\n            return $input;\n        }\n    };\n\n})(window.jQuery);\n","/**\n * Yii Captcha widget.\n *\n * This is the JavaScript widget used by the yii\\captcha\\Captcha widget.\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n * @author Qiang Xue <qiang.xue@gmail.com>\n * @since 2.0\n */\n(function ($) {\n    $.fn.yiiCaptcha = function (method) {\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if (typeof method === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('Method ' + method + ' does not exist on jQuery.yiiCaptcha');\n            return false;\n        }\n    };\n\n    var defaults = {\n        refreshUrl: undefined,\n        hashKey: undefined\n    };\n\n    var methods = {\n        init: function (options) {\n            return this.each(function () {\n                var $e = $(this);\n                var settings = $.extend({}, defaults, options || {});\n                $e.data('yiiCaptcha', {\n                    settings: settings\n                });\n\n                $e.on('click.yiiCaptcha', function () {\n                    methods.refresh.apply($e);\n                    return false;\n                });\n\n            });\n        },\n\n        refresh: function () {\n            var $e = this,\n                settings = this.data('yiiCaptcha').settings;\n            $.ajax({\n                url: $e.data('yiiCaptcha').settings.refreshUrl,\n                dataType: 'json',\n                cache: false,\n                success: function (data) {\n                    $e.attr('src', data.url);\n                    $('body').data(settings.hashKey, [data.hash1, data.hash2]);\n                }\n            });\n        },\n\n        destroy: function () {\n            return this.each(function () {\n                $(window).unbind('.yiiCaptcha');\n                $(this).removeData('yiiCaptcha');\n            });\n        },\n\n        data: function () {\n            return this.data('yiiCaptcha');\n        }\n    };\n})(window.jQuery);\n\n"],"sourceRoot":"/source/"}